// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List    = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry   = require("bs-platform/lib/js/curry.js");

function fold_lefti(f, seed, l) {
  return List.fold_left((function (param, e) {
                  var n = param[0];
                  return /* tuple */[
                          n + 1 | 0,
                          Curry._3(f, n, param[1], e)
                        ];
                }), /* tuple */[
                0,
                seed
              ], l)[1];
}

function mapi_partial(f, xs) {
  return List.rev(fold_lefti((function (n, acc, x) {
                    var x$1 = Curry._2(f, n, x);
                    var xs = acc;
                    if (x$1) {
                      return /* :: */[
                              x$1[0],
                              xs
                            ];
                    } else {
                      return xs;
                    }
                  }), /* [] */0, xs));
}

var a1 = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* :: */[
        4,
        /* [] */0
      ]
    ]
  ]
];

var x2 = mapi_partial((function (n, e) {
        var match = +(n === 2);
        if (match !== 0) {
          return /* None */0;
        } else {
          return /* Some */[e];
        }
      }), a1);

console.log($$Array.of_list(x2));

function combineWith(x, a, skipIndex) {
  return mapi_partial((function (index, e) {
                var match = +(index === skipIndex);
                if (match !== 0) {
                  return /* None */0;
                } else {
                  return /* Some */[/* tuple */[
                            x,
                            e
                          ]];
                }
              }), a);
}

var c = combineWith(99, a1, 1);

console.log($$Array.of_list(c));

exports.fold_lefti   = fold_lefti;
exports.mapi_partial = mapi_partial;
exports.a1           = a1;
exports.x2           = x2;
exports.combineWith  = combineWith;
exports.c            = c;
/* x2 Not a pure module */
