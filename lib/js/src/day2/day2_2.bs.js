// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var $$Array    = require("bs-platform/lib/js/array.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function fold_lefti(f, seed, l) {
  return List.fold_left((function (param, e) {
                  var n = param[0];
                  return /* tuple */[
                          n + 1 | 0,
                          Curry._3(f, n, param[1], e)
                        ];
                }), /* tuple */[
                0,
                seed
              ], l)[1];
}

function mapi_partial(f, xs) {
  return List.rev(fold_lefti((function (n, acc, x) {
                    var x$1 = Curry._2(f, n, x);
                    var xs = acc;
                    if (x$1) {
                      return /* :: */[
                              x$1[0],
                              xs
                            ];
                    } else {
                      return xs;
                    }
                  }), /* [] */0, xs));
}

function combineWith(x, a, skipIndex) {
  return mapi_partial((function (index, e) {
                var match = +(index === skipIndex);
                if (match !== 0) {
                  return /* None */0;
                } else {
                  return /* Some */[/* tuple */[
                            x,
                            e
                          ]];
                }
              }), a);
}

var a1 = /* :: */[
  5,
  /* :: */[
    9,
    /* :: */[
      2,
      /* :: */[
        8,
        /* [] */0
      ]
    ]
  ]
];

var pairsExludingSelf = List.concat(List.mapi((function (n, e) {
            return combineWith(e, a1, n);
          }), a1));

var evenlyDividablePairs = List.filter((function (param) {
          return +(Caml_int32.mod_(param[0], param[1]) === 0);
        }))(pairsExludingSelf);

console.log($$Array.of_list(pairsExludingSelf));

console.log($$Array.of_list(evenlyDividablePairs));

exports.fold_lefti           = fold_lefti;
exports.mapi_partial         = mapi_partial;
exports.combineWith          = combineWith;
exports.a1                   = a1;
exports.pairsExludingSelf    = pairsExludingSelf;
exports.evenlyDividablePairs = evenlyDividablePairs;
/* pairsExludingSelf Not a pure module */
